#ifndef FT_STOCK_STR_H
# define FT_STOCK_STR_H

typedef struct s_stock_str 
{
	int	size;
	char	*str;
	char	*copy;
}	t_stock_str;

struct s_stock_str *ft_strs_to_tab(int ac, char **av);

#endif


/*#include <stdio.h> */
#include <unistd.h>
#include <stdlib.h>
#include "ft_stock_str.h"

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
	{
		i++;
	}
	return (i);
}

char	*ft_strdup(char *src)
{
	char	*s1;
	int		strlen;
	int		i;

	i = 0;
	strlen = ft_strlen(src);
	s1 = malloc((strlen + 1) * sizeof(char));
	if (s1 == NULL)
		return (NULL);
	while (src[i] != '\0')
	{
		s1[i] = src[i];
		i++;
	}
	s1[i] = '\0';
	return (s1);
}

struct	s_stock_str	*ft_strs_to_tab(int ac, char **av)
{
	t_stock_str	*ret;
	int			i;

	ret = (t_stock_str *)malloc((ac + 1) * sizeof(t_stock_str));
	if (*av == 0)
		return (NULL);
	i = 0;
	while (i < ac)
	{
		ret[i].size = ft_strlen(av[i]);
		ret[i].str = av[i];
		ret[i].copy = ft_strdup(av[i]);
		i++;
	}
	ret[i].size = 0;
	ret[i].str = 0;
	ret[i].copy = 0;
	return (ret);
}
/*
int main(int argc, char **argv )
{
    struct s_stock_str *result = ft_strs_to_tab(argc, argv);
    int     i;
    
    i = 0;
    while (i < argc)
    {
    printf("string is: %s \n the index is: %d \n ",  result[i].str ,i);
     printf("copy is: %s\n",  result[i].copy);
     printf("size is: %d\n",  result[i].size);
        i++;
    }
    return (0);
} */
